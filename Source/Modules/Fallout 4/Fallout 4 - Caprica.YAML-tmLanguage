# [PackageDev] target_format: plist, ext: tmLanguage
---
name: Papyrus - Fallout 4 (Caprica)
scopeName: source.papyrus.fallout4.caprica
fileTypes: [psc]
uuid: ccd59db2-adc3-47b4-99e2-0c86d2a2920e

patterns:
- comment: Empty line
  name: meta.emptyline.papyrus
  match: ^\s*$
- include: '#commentDocumentation'
- include: '#commentBlock'
- include: '#commentLine'
- include: '#scriptHeader'
- include: '#import'
- include: '#group'
- include: '#endgroup'
- include: '#struct'
- include: '#endstruct'
- include: '#customevent'
- include: '#state'
- include: '#endState'
- include: '#event'
- include: '#endEvent'
- include: '#return'
- include: '#if'
- include: '#elseif'
- include: '#else'
- include: '#endIf'
- include: '#for'
- include: '#endFor'
- include: '#break'
- include: '#continue'
- include: '#forEach'
- include: '#endForEach'
- include: '#switch'
- include: '#case'
- include: '#default'
- include: '#endSwitch'
- include: '#do'
- include: '#loopWhile'
- include: '#while'
- include: '#endWhile'
- include: '#property'
- include: '#endProperty'
- include: '#function'
- include: '#endFunction'
- include: '#variable'
- include: '#assign'
- include: '#expression'
- include: '#whitespace'
- include: '#unmatched'

repository:
  endOfLine:
    patterns:
    - include: '#commentBlock'
    - include: '#commentLine'
    - include: '#whitespace'
    - include: '#multiline'
    - include: '#unmatched'

  comments:
    patterns:
    - include: '#commentBlock'
    - include: '#commentLine'
    - include: '#commentDocumentation'

  commentBlock:
    patterns:
    - comment: Comment block
      name: comment.block.papyrus
      begin: ;/
      end: /;

  commentLine:
    patterns:
    - comment: Single line comment
      name: comment.line.papyrus
      match: ;.*$

  commentDocumentation:
    patterns:
    - comment: Documentation comment
      name: comment.documentation.papyrus
      begin: ^\s*\{
      end: \}

  scriptHeader:
    patterns:
    - comment: Scriptheader
      name: meta.scriptheader.papyrus
      begin: (?i)^\s*(scriptname)\s+ #\b
      beginCaptures:
        '1': {name: keyword.operator.papyrus}
      end: (?i)([_a-z][0-9_a-z]*)(?!\:)\b
      endCaptures:
        '1': {name: storage.type.papyrus}
      patterns:
      - include: '#namespace'
    - comment: Script parent declaration
      name: keyword.other.papyrus
      begin: (?i)\b(extends)\b
      beginCaptures:
        '1': {name: keyword.operator.papyrus}
      end: (?i)([_a-z][0-9_a-z]*)(?!\:)\b
      endCaptures:
        '1': {name: storage.type.papyrus}
      patterns:
      - include: '#namespace'
    - comment: Script flags
      name: keyword.other.papyrus
      match: (?i)\b(conditional|const|default|hidden|native)\b

  import:
    patterns:
    - comment: Import statement
      name: meta.import.papyrus
      begin: (?i)^\s*(import)\s+
      beginCaptures:
        '1': {name: keyword.other.papyrus}
      end: ([\n\r])
      patterns:
      - include: '#illegalKeywords'
      - include: '#illegalSpecialVariables'
      - include: '#illegalBaseTypes'
      - include: '#typeIdentifier'
      - include: '#endOfLine'

  struct:
    patterns:
    - comment: Struct declaration
      name: meta.struct.papyrus
      begin: (?i)^\s*(struct)\s+
      beginCaptures:
       '1': {name: keyword.other.papyrus}
      end: ([\n\r])
      patterns:
      - include: '#illegalKeywords'
      - include: '#illegalSpecialVariables'
      - include: '#illegalBaseTypes'
      - include: '#identifier'
      - include: '#endOfLine'

  endstruct:
    patterns:
    - comment: EndStruct statement
      name: meta.endstruct.papyrus
      begin: (?i)^\s*(endstruct)\b
      beginCaptures:
       '1': {name: keyword.other.papyrus}
      end: ([\n\r])
      patterns:
      - include: '#endOfLine'

  group:
    patterns:
    - comment: Gourp declaration
      name: meta.group.papyrus
      begin: (?i)^\s*(group)\s+
      beginCaptures:
       '1': {name: keyword.other.papyrus}
      end: ([\n\r])
      patterns:
      - comment: Group flags
        name: keyword.other.papyrus
        match: (?i)\b(collapsed|collapsedonref|collapsedonbase)\b
      - include: '#illegalKeywords'
      - include: '#illegalSpecialVariables'
      - include: '#illegalBaseTypes'
      - include: '#identifier'
      - include: '#endOfLine'

  endgroup:
    patterns:
    - comment: EndGroup statement
      name: meta.endgroup.papyrus
      begin: (?i)^\s*(endgroup)\b
      beginCaptures:
       '1': {name: keyword.other.papyrus}
      end: ([\n\r])
      patterns:
      - include: '#endOfLine'

  customevent:
    patterns:
    - comment: CustomEvent declaration
      name: meta.customevent.papyrus
      begin: (?i)^\s*(customevent)\s+([_a-z][0-9_a-z]*)
      beginCaptures:
       '1': {name: keyword.other.papyrus}
      end: ([\n\r])
      patterns:
      - include: '#endOfLine'

  state:
    patterns:
    - comment: State declaration
      name: meta.state.papyrus
      begin: (?i)^\s*(?:(auto)\s+)?(state)\s+
      beginCaptures:
       '1': {name: keyword.other.papyrus}
       '2': {name: keyword.other.papyrus}
      end: ([\n\r])
      patterns:
      - include: '#illegalKeywords'
      - include: '#illegalSpecialVariables'
      - include: '#illegalBaseTypes'
      - include: '#identifier'
      - include: '#endOfLine'

  endState:
    patterns:
    - comment: EndState statement
      name: meta.endstate.papyrus
      begin: (?i)^\s*(endstate)\b
      beginCaptures:
       '1': {name: keyword.other.papyrus}
      end: ([\n\r])
      patterns:
      - include: '#endOfLine'

  property:
    patterns:
    - comment: Property declaration
      name: meta.property.papyrus
      begin: (?i)^\s*(?:([_a-z][0-9_a-z]*)(\:))?(?:([_a-z][0-9_a-z]*)(\:))?(?:([_a-z][0-9_a-z]*)(\:))?(?:([_a-z][0-9_a-z]*)(\:))?(?:([_a-z][0-9_a-z]*)(\:))?(?:([_a-z][0-9_a-z]*)(\:))?(?:([_a-z][0-9_a-z]*)(\:))?(?:([_a-z][0-9_a-z]*)(\:))?(?:([_a-z][0-9_a-z]*)(\:))?(?:([_a-z][0-9_a-z]*)(\:))?([_a-z][0-9_a-z]*)(?:\[\])?\s+(property)\s+
      beginCaptures:
        '1': {name: storage.type.papyrus}
        '2': {name: keyword.operator.papyrus}
        '3': {name: storage.type.papyrus}
        '4': {name: keyword.operator.papyrus}
        '5': {name: storage.type.papyrus}
        '6': {name: keyword.operator.papyrus}
        '7': {name: storage.type.papyrus}
        '8': {name: keyword.operator.papyrus}
        '9': {name: storage.type.papyrus}
        '10': {name: keyword.operator.papyrus}
        '11': {name: storage.type.papyrus}
        '12': {name: keyword.operator.papyrus}
        '13': {name: storage.type.papyrus}
        '14': {name: keyword.operator.papyrus}
        '15': {name: storage.type.papyrus}
        '16': {name: keyword.operator.papyrus}
        '17': {name: storage.type.papyrus}
        '18': {name: keyword.operator.papyrus}
        '19': {name: storage.type.papyrus}
        '20': {name: keyword.operator.papyrus}
        '21': {name: storage.type.papyrus}
        '22': {name: keyword.other.papyrus}
      end: ([\n\r])
      patterns:
      - comment: Assignment operator
        name: keyword.operator.assignment.papyrus
        match: (\=)
      - include: '#constants'
      - include: '#propertyFlags'
      - include: '#illegalKeywords'
      - include: '#illegalSpecialVariables'
      - include: '#illegalBaseTypes'
      - include: '#identifier'
      - include: '#endOfLine'

  propertyFlags:
    patterns:
    - comment: Property flags
      name: keyword.other.papyrus
      match: (?i)\b(auto|autoreadonly|conditional|const|hidden|mandatory)\b

  endProperty:
    patterns:
    - comment: EndProperty statement
      name: meta.endproperty.papyrus
      begin: (?i)^\s*(endproperty)\b
      beginCaptures:
       '1': {name: keyword.other.papyrus}
      end: ([\n\r])
      patterns:
      - include: '#endOfLine'

  function:
    patterns:
    - comment: Function declaration
      name: meta.function.papyrus
      begin: (?i)^\s*(?:([_a-z][0-9_a-z]*)(\:))?(?:([_a-z][0-9_a-z]*)(\:))?(?:([_a-z][0-9_a-z]*)(\:))?(?:([_a-z][0-9_a-z]*)(\:))?(?:([_a-z][0-9_a-z]*)(\:))?(?:([_a-z][0-9_a-z]*)(\:))?(?:([_a-z][0-9_a-z]*)(\:))?(?:([_a-z][0-9_a-z]*)(\:))?(?:([_a-z][0-9_a-z]*)(\:))?(?:([_a-z][0-9_a-z]*)(\:))?(?:([_a-z][0-9_a-z]*)(?:\[\])\s+|([_a-z][0-9_a-z]*)\s+)?(function)\s+
      beginCaptures:
        '1': {name: storage.type.papyrus}
        '2': {name: keyword.operator.papyrus}
        '3': {name: storage.type.papyrus}
        '4': {name: keyword.operator.papyrus}
        '5': {name: storage.type.papyrus}
        '6': {name: keyword.operator.papyrus}
        '7': {name: storage.type.papyrus}
        '8': {name: keyword.operator.papyrus}
        '9': {name: storage.type.papyrus}
        '10': {name: keyword.operator.papyrus}
        '11': {name: storage.type.papyrus}
        '12': {name: keyword.operator.papyrus}
        '13': {name: storage.type.papyrus}
        '14': {name: keyword.operator.papyrus}
        '15': {name: storage.type.papyrus}
        '16': {name: keyword.operator.papyrus}
        '17': {name: storage.type.papyrus}
        '18': {name: keyword.operator.papyrus}
        '19': {name: storage.type.papyrus}
        '20': {name: keyword.operator.papyrus}
        '21': {name: storage.type.papyrus}
        '22': {name: storage.type.papyrus}
        '23': {name: keyword.other.papyrus}
      end: ([\n\r])
      patterns:
      - include: '#functionFlags'
      - include: '#illegalKeywords'
      - include: '#illegalSpecialVariables'
      - include: '#illegalBaseTypes'
      - include: '#functionIdentifier'
      - include: '#functionParameters'
      - include: '#endOfLine'

  functionIdentifier:
    patterns:
    - comment: Function identifier
      name: entity.name.function.papyrus
      match: (?i)\b([_a-z][0-9_a-z]*)\s*(?=\()

  functionParameters:
    patterns:
    - comment: Function parameters
      name: meta.functionparameters.papyrus
      begin: \(
      end: \)
      patterns:
      - comment: Assignment operator
        name: keyword.operator.assignment.papyrus
        match: (\=)
      - include: '#constants'
      - include: '#illegalKeywords'
      - include: '#illegalSpecialVariables'
      - include: '#functionParameter'
      - include: '#comma'
      - include: '#multiline'
      - include: '#whitespace'
      - include: '#unmatched'

  functionParameter:
    patterns:
    - include: '#functionParameterIdentifier'
    - include: '#typeIdentifier'
    - include: '#brackets'

  functionParameterIdentifier:
    patterns:
    - comment: Event parameter identifier
      name: variable.parameter.papyrus
      match: (?i)\b([_a-z][0-9_a-z]*)\s*(?=(\,|\)|\=))

  functionFlags:
    patterns:
    - comment: Function flags
      name: keyword.other.papyrus
      match: (?i)\b(betaonly|debugonly|global|native)\b

  endFunction:
    patterns:
    - comment: EndFunction statement
      name: meta.endfunction.papyrus
      begin: (?i)^\s*(endfunction)\b
      beginCaptures:
       '1': {name: keyword.other.papyrus}
      end: ([\n\r])
      patterns:
      - include: '#endOfLine'

  event:
    patterns:
    - comment: Event declaration
      name: meta.event.papyrus
      begin: (?i)^\s*(event)\s+
      beginCaptures:
       '1': {name: keyword.control.eventstart.papyrus}
      end: ([\n\r])
      patterns:
      - include: '#eventFlags'
      - include: '#illegalKeywords'
      - include: '#illegalSpecialVariables'
      - include: '#illegalBaseTypes'
      - include: '#eventIdentifier'
      - include: '#eventParameters'
      - include: '#endOfLine'

  eventIdentifier:
    patterns:
    - comment: Event identifier
      name: entity.name.function.papyrus
      match: (?i)([_a-z][0-9_a-z]*)\s*(?=\()
    - comment: Namespace
      name: meta.name.event.papyrus
      begin: (?i)([_a-z][0-9_a-z]*)\s*(?!\()
      beginCaptures:
        '1': {name: storage.type.papyrus}
        '2': {name: keyword.operator.papyrus}
      end: (\.)
      endCaptures:
        '1': {name: keyword.operator.papyrus}
      patterns:
      - comment: Namespace identifier
        name: storage.type.papyrus
        match: (?i)([_a-z][0-9_a-z]*)
      - comment: Namespace separator
        name: keyword.operator.papyrus
        match: (\:)

  eventParameters:
    patterns:
    - comment: Event parameters
      name: meta.eventparameters.papyrus
      begin: \(
      end: \)
      patterns:
      - include: '#illegalKeywords'
      - include: '#illegalSpecialVariables'
      - include: '#eventParameter'
      - include: '#comma'
      - include: '#multiline'
      - include: '#whitespace'
      - include: '#unmatched'

  eventParameter:
    patterns:
    - include: '#eventParameterIdentifier'
    - include: '#typeIdentifier'
    - include: '#brackets'

  eventParameterIdentifier:
    patterns:
    - comment: Event parameter identifier
      name: variable.parameter.papyrus
      match: (?i)\b([_a-z][0-9_a-z]*)\s*(?=(\,|\)))

  eventFlags:
    patterns:
    - comment: Event flags
      name: keyword.other.papyrus
      match: (?i)\b(native)\b

  endEvent:
    patterns:
    - comment: EndEvent statement
      name: meta.endevent.papyrus
      begin: (?i)^\s*(endevent)\b
      beginCaptures:
       '1': {name: keyword.other.papyrus}
      end: ([\n\r])
      patterns:
      - include: '#endOfLine'

  return:
    patterns:
    - comment: Return statements
      name: meta.return.papyrus
      begin: (?i)^\s*(return)\b
      beginCaptures:
       '1': {name: keyword.other.papyrus}
      end: ([\n\r])
      patterns:
      - include: '#expression'
      - include: '#endOfLine'

  if:
    patterns:
    - comment: If statement
      name: meta.if.papyrus
      begin: (?i)^\s*(if)\b
      beginCaptures:
       '1': {name: keyword.other.papyrus}
      end: ([\n\r])
      patterns:
      - include: '#expression'
      - include: '#endOfLine'

  elseif:
    patterns:
    - comment: ElseIf statement
      name: meta.elseif.papyrus
      begin: (?i)^\s*(elseif)\b
      beginCaptures:
       '1': {name: keyword.other.papyrus}
      end: ([\n\r])
      patterns:
      - include: '#expression'
      - include: '#endOfLine'

  else:
    patterns:
    - comment: Else statement
      name: meta.else.papyrus
      begin: (?i)^\s*(else)\b
      beginCaptures:
       '1': {name: keyword.other.papyrus}
      end: ([\n\r])
      patterns:
      - include: '#endOfLine'

  endIf:
    patterns:
    - comment: EndIf statement
      name: meta.endif.papyrus
      begin: (?i)^\s*(endif)\b
      beginCaptures:
       '1': {name: keyword.other.papyrus}
      end: ([\n\r])
      patterns:
      - include: '#endOfLine'

  for:
    patterns:
    - comment: For statement
      name: meta.for.papyrus
      begin: (?i)^\s*(for)\s+(?:(?:(?:(int|float)|(auto))\s+))?([_a-z][0-9_a-z]*)\s*(\=)\s*
      beginCaptures:
        '1': {name: keyword.other.papyrus}
        '2': {name: storage.type.papyrus}
        '3': {name: keyword.other.papyrus}
        '4': {name: variable.other.papyrus}
        '5': {name: keyword.operator.papyrus}
      end: ([\n\r])
      patterns:
      - name: keyword.other.papyrus
        match: (?i)(?:\b(to)\b)
      - name: keyword.other.papyrus
        match: (?i)(?:\b(step)\b)
      - include: '#expression'
      - include: '#endOfLine'

  endFor:
    patterns:
    - comment: EndFor statement
      name: meta.endfor.papyrus
      begin: (?i)^\s*(endfor)\b
      beginCaptures:
       '1': {name: keyword.other.papyrus}
      end: ([\n\r])
      patterns:
      - include: '#endOfLine'

  forEach:
    patterns:
    - comment: ForEach statement
      name: meta.foreach.papyrus
      begin: (?i)^\s*(foreach)\s+(?:(?:(?:([_a-z][0-9_a-z]*)(\:))?)(?:(?:([_a-z][0-9_a-z]*)(\:))?)(?:(?:([_a-z][0-9_a-z]*)(\:))?)(?:(?:([_a-z][0-9_a-z]*)(\:))?)(?:(?:([_a-z][0-9_a-z]*)(\:))?)(?:(?:([_a-z][0-9_a-z]*)(\:))?)(?:(?:([_a-z][0-9_a-z]*)(\:))?)(?:(?:([_a-z][0-9_a-z]*)(\:))?)(?:(?:([_a-z][0-9_a-z]*)(\:))?)(?:(?:([_a-z][0-9_a-z]*)(\:))?)([_a-z][0-9_a-z]*)|(auto))\s+([_a-z][0-9_a-z]*)\s+
      beginCaptures:
        '1': {name: keyword.other.papyrus}
        '2': {name: storage.type.papyrus}
        '3': {name: keyword.operator.papyrus}
        '4': {name: storage.type.papyrus}
        '5': {name: keyword.operator.papyrus}
        '6': {name: storage.type.papyrus}
        '7': {name: keyword.operator.papyrus}
        '8': {name: storage.type.papyrus}
        '9': {name: keyword.operator.papyrus}
        '10': {name: storage.type.papyrus}
        '11': {name: keyword.operator.papyrus}
        '12': {name: storage.type.papyrus}
        '13': {name: keyword.operator.papyrus}
        '14': {name: storage.type.papyrus}
        '15': {name: keyword.operator.papyrus}
        '16': {name: storage.type.papyrus}
        '17': {name: keyword.operator.papyrus}
        '18': {name: storage.type.papyrus}
        '19': {name: keyword.operator.papyrus}
        '20': {name: storage.type.papyrus}
        '21': {name: keyword.operator.papyrus}
        '22': {name: storage.type.papyrus}
        '23': {name: keyword.other.papyrus}
        '24': {name: variable.other.papyrus}
      end: ([\n\r])
      patterns:
      - name: keyword.other.papyrus
        match: (?i)(?:\b(in)\b)
      - include: '#expression'
      - include: '#endOfLine'

  endForEach:
    patterns:
    - comment: EndForEach statement
      name: meta.endforeach.papyrus
      begin: (?i)^\s*(endforeach)\b
      beginCaptures:
       '1': {name: keyword.other.papyrus}
      end: ([\n\r])
      patterns:
      - include: '#endOfLine'

  switch:
    patterns:
    - comment: Switch statement
      name: meta.switch.papyrus
      begin: (?i)^\s*(switch)\b
      beginCaptures:
       '1': {name: keyword.other.papyrus}
      end: ([\n\r])
      patterns:
      - include: '#expression'
      - include: '#endOfLine'

  case:
    patterns:
    - comment: Case statement
      name: meta.case.papyrus
      begin: (?i)^\s*(case)\b
      beginCaptures:
        '1': {name: keyword.other.papyrus}
      end: ([\n\r])
      patterns:
      - include: '#integer'
      - include: '#string'
      - include: '#endOfLine'

  endSwitch:
    patterns:
    - comment: EndSwitch statement
      name: meta.endswitch.papyrus
      begin: (?i)^\s*(endswitch)\b
      beginCaptures:
       '1': {name: keyword.other.papyrus}
      end: ([\n\r])
      patterns:
      - include: '#endOfLine'

  do:
    patterns:
    - comment: Do statement
      name: meta.do.papyrus
      begin: (?i)^\s*(do)\b
      beginCaptures:
       '1': {name: keyword.other.papyrus}
      end: ([\n\r])
      patterns:
      - include: '#endOfLine'

  loopWhile:
    patterns:
    - comment: LoopWhile statement
      name: meta.loopwhile.papyrus
      begin: (?i)^\s*(loopwhile)\b
      beginCaptures:
       '1': {name: keyword.other.papyrus}
      end: ([\n\r])
      patterns:
      - include: '#expression'
      - include: '#endOfLine'

  break:
    patterns:
    - comment: Break statement
      name: meta.break.papyrus
      begin: (?i)^\s*(break)\b
      beginCaptures:
       '1': {name: keyword.other.papyrus}
      end: ([\n\r])
      patterns:
      - include: '#endOfLine'

  continue:
    patterns:
    - comment: Continue statement
      name: meta.continue.papyrus
      begin: (?i)^\s*(continue)\b
      beginCaptures:
       '1': {name: keyword.other.papyrus}
      end: ([\n\r])
      patterns:
      - include: '#endOfLine'

  default:
    patterns:
    - comment: Default statement
      name: meta.default.papyrus
      begin: (?i)^\s*(default)\b
      beginCaptures:
       '1': {name: keyword.other.papyrus}
      end: ([\n\r])
      patterns:
      - include: '#endOfLine'

  while:
    patterns:
    - comment: While statement
      name: meta.while.papyrus
      begin: (?i)^\s*(while)\b
      beginCaptures:
       '1': {name: keyword.other.papyrus}
      end: ([\n\r])
      patterns:
      - include: '#expression'
      - include: '#endOfLine'

  endWhile:
    patterns:
    - comment: EndWhile statement
      name: meta.endwhile.papyrus
      begin: (?i)^\s*(endwhile)\b
      beginCaptures:
       '1': {name: keyword.other.papyrus}
      end: ([\n\r])
      patterns:
      - include: '#endOfLine'

  variable:
    patterns:
    - comment: Variable declaration with a default value
      name: meta.variable.papyrus
      begin: (?i)\b(?:([_a-z][0-9_a-z]*)(?:\[\])|([_a-z][0-9_a-z]*))\s+
      begin: (?i)^\s*(?:([_a-z][0-9_a-z]*)(\:))?(?:([_a-z][0-9_a-z]*)(\:))?(?:([_a-z][0-9_a-z]*)(\:))?(?:([_a-z][0-9_a-z]*)(\:))?(?:([_a-z][0-9_a-z]*)(\:))?(?:([_a-z][0-9_a-z]*)(\:))?(?:([_a-z][0-9_a-z]*)(\:))?(?:([_a-z][0-9_a-z]*)(\:))?(?:([_a-z][0-9_a-z]*)(\:))?(?:([_a-z][0-9_a-z]*)(\:))?(?:([_a-z][0-9_a-z]*)(?:\[\])|([_a-z][0-9_a-z]*))\s+([_a-z][0-9_a-z]*)(?:\s*(\=)\s*)?
      beginCaptures:
        '1': {name: storage.type.papyrus}
        '2': {name: keyword.operator.papyrus}
        '3': {name: storage.type.papyrus}
        '4': {name: keyword.operator.papyrus}
        '5': {name: storage.type.papyrus}
        '6': {name: keyword.operator.papyrus}
        '7': {name: storage.type.papyrus}
        '8': {name: keyword.operator.papyrus}
        '9': {name: storage.type.papyrus}
        '10': {name: keyword.operator.papyrus}
        '11': {name: storage.type.papyrus}
        '12': {name: keyword.operator.papyrus}
        '13': {name: storage.type.papyrus}
        '14': {name: keyword.operator.papyrus}
        '15': {name: storage.type.papyrus}
        '16': {name: keyword.operator.papyrus}
        '17': {name: storage.type.papyrus}
        '18': {name: keyword.operator.papyrus}
        '19': {name: storage.type.papyrus}
        '20': {name: keyword.operator.papyrus}
        '21': {name: storage.type.papyrus}
        '22': {name: storage.type.papyrus}
        '23': {name: variable.other.papyrus}
        '24': {name: keyword.other.papyrus}
      end: ([\n\r])
      patterns:
      - include: '#constants'
      - name: keyword.other.papyrus
        match: (?i)(?:\b(conditional|const)\b)
      - include: '#expression'
      - include: '#endOfLine'

    - comment: Scriptwide variable declaration without a default value
      name: meta.variable.papyrus
      begin: (?i)^\s*(?:([_a-z][0-9_a-z]*)(\:))?([_a-z][0-9_a-z]*)(?:\[\])?\s+([_a-z][0-9_a-z]*)(?:\s+(conditional|const)\b)?
      beginCaptures:
       '1': {name: storage.type.papyrus}
       '2': {name: keyword.operator.papyrus}
       '3': {name: storage.type.papyrus}
       '4': {name: variable.other.papyrus}
       '5': {name: keyword.operator.papyrus}
      end: ([\n\r])
      patterns:
      - include: '#endOfLine'

  expression:
    patterns:
    - comment: OR
      name: keyword.operator.papyrus
      match: \|\|
    - include: '#andExpression'
    - include: '#endOfLine'

  andExpression:
    patterns:
    - comment: AND
      name: keyword.operator.papyrus
      match: \&\&
    - include: '#boolExpression'

  boolExpression:
    patterns:
    - comment: Comparison operators
      name: keyword.operator.papyrus
      match: (\=\=|\!\=|\<\=|\>\=|\<|\>)
    - include: '#addExpression'
    

  addExpression:
    patterns:
    - comment: Addition or subtraction
      name: keyword.operator.papyrus
      match: (\+|\-)
    - include: '#multExpression'

  multExpression:
    patterns:
    - comment: Multiplication, division, or modulus
      name: keyword.operator.papyrus
      match: (\*|/|\%)
    - include: '#unaryExpression'

  unaryExpression:
    patterns:
    - comment: Unary minus or NOT
      name: keyword.operator.papyrus
      match: (\-|\!)
    - include: '#castAtom'

  castAtom:
    patterns:
    - comment: Cast
      name: meta.cast.papyrus
      begin: (?i)\b(as)\s+
      beginCaptures:
        '1': {name: keyword.operator.papyrus}
      end: (?i)([_a-z][0-9_a-z]*)(?!\:)\b
      endCaptures:
        '1': {name: storage.type.papyrus}
      patterns:
      - include: '#namespace'
      - include: '#multiline'
    - include: '#dotAtom'

  dotAtom:
    patterns:
    - comment: Dot
      name: keyword.operator.papyrus
      match: \.
    - include: '#constants'
    - include: '#arrayAtom'
    - include: '#arrayFuncOrId'

  arrayAtom:
    patterns:
    - comment: Array
      name: meta.array.papyrus
      begin: \[
      end: \]
      patterns:
      - include: '#expression'
    - include: '#atom'

  atom:
    patterns:
    - comment: New array
      name: meta.newarray.papyrus
      begin: (?i)\b(new)\s+
      beginCaptures:
        '1': {name: keyword.operator.papyrus}
      end: (?i)([_a-z][0-9_a-z]*)(?!\:)\b
      endCaptures:
        '1': {name: storage.type.papyrus}
      patterns:
      - include: '#namespace'
    - comment: Brackets
      name: meta.arraysize.papyrus
      begin: \[
      end: \]
      patterns:
      - include: '#integer'
    - comment: Parenthesis
      name: meta.parenthesis.papyrus
      begin: \(
      end: (\)|[\n\r])
      patterns:
      - include: '#expression'
    - include: '#funcOrId'

  funcOrId:
    patterns:
    - comment: Length
      name: keyword.other.papyrus
      match: (?i)\b(length)\b
    - include: '#functionCall'
    - include: '#illegalKeywords'
    - include: '#illegalBaseTypes'
    - include: '#specialVariables'
    - include: '#identifier'

  functionCall:
    patterns:
    - comment: Function call
      name: meta.functioncall.papyrus
      begin: (?i)\b([_a-z][0-9_a-z]*)\(
      beginCaptures:
       '1': {name: variable.other.papyrus}
      end: \)
      patterns:
      - include: '#functionCallParameters'

  functionCallParameters:
    patterns:
    - include: '#comma'
    - include: '#functionCallParameter'

  functionCallParameter:
    patterns:
    - comment: Specific parameter
      name: meta.functioncallparameter.papyrus
      match: (?i)\b(?:([_a-z][0-9_a-z]*)\s*(\=)(?!\=))?
      captures:
       '1': {name: variable.parameter.papyrus}
       '2': {name: keyword.operator.papyrus}
    - include: '#expression'

  arrayFuncOrId:
    patterns:
    - include: '#funcOrId'
    - comment: Array element access
      name: meta.arrayelement.papyrus
      begin: \[
      end: \]
      patterns:
      - include: '#expression'

  assign:
    patterns:
    - comment: Assign statement
      name: meta.assign.papyrus
      begin: ^\s*
      end: ([\n\r])
      patterns:
      - include: '#assignmentOperators'
      - include: '#expression'
      - include: '#endOfLine'

  assignmentOperators:
    patterns:
    - comment: Assignment operators
      name: keyword.operator.papyrus
      match: (\=|\+\=|\-\=|\*\=|\/\=|\%\=)

  comma:
    patterns:
    - comment: Comma
      name: meta.comma.papyrus
      match: \,

  whitespace:
    patterns:
    - comment: Whitespace
      name: meta.whitespace.papyrus
      match: ([ \t])

  multiline:
    patterns:
    - comment: Multiline
      name: meta.multiline.papyrus
      begin: \\
      beginCaptures:
        '0': {name: keyword.operator.papyrus}
      end: ([\n\r])
      patterns:
      - include: '#commentBlock'
      - include: '#commentLine'
      - include: '#whitespace'
      - include: '#unmatched'

  unmatched:
    patterns:
    - comment: Unmatched
      name: meta.invalid.papyrus #invalid.illegal
      match: ([^\n\r])

  unaryMinus:
    patterns:
    - comment: Unary minus
      name: keyword.operator.papyrus
      match: \-(?=\d)

  constants:
    patterns:
    - include: '#bool'
    - include: '#float'
    - include: '#integer'
    - include: '#string'

  bool:
    patterns:
    - comment: Boolean literal
      name: constant.language.boolean.papyrus
      match: (?i)\b(true|false|none)\b

  float:
    patterns:
    - include: '#unaryMinus'
    - comment: Float literal
      name: constant.numeric.float.papyrus
      match: \b(\d+\.\d+)\b

  integer:
    patterns:
    - include: '#unaryMinus'
    - comment: Integer literal
      name: constant.numeric.integer.papyrus
      match: (?i)\b(0x[0-9a-f]+|\d+)\b

  string:
    patterns:
    - comment: String literal
      name: string.quoted.double
      begin: \"
      end: \"
      patterns:
      - comment: Escape sequences
        name: constant.character.escape.papyrus
        match: (\\.)

  keywords:
    patterns:
    - comment: Keywords
      name: keyword.other.papyrus
      match: (?i)\b(as|auto|autoreadonly|betaonly|collapsed|collapsedonref|collapsedonbase|const|customevent|debugonly|default|else|elseif|endevent|endfunction|endgroup|endif|endproperty|endstate|endstruct|endwhile|event|extends|false|function|global|group|if|import|length|mandatory|native|new|none|property|return|scriptname|state|struct|true|while|for|to|step|break|endfor|continue|foreach|endforeach|switch|case|endswitch|do|loopwhile)\b

  illegalKeywords:
    patterns:
    - comment: Keywords
      name: meta.invalid.papyrus
      match: (?i)\b(as|auto|autoreadonly|betaonly|collapsed|collapsedonref|collapsedonbase|const|customevent|debugonly|default|else|elseif|endevent|endfunction|endgroup|endif|endproperty|endstate|endstruct|endwhile|event|extends|false|function|global|group|if|import|length|mandatory|native|new|none|property|return|scriptname|state|struct|true|while|for|to|step|break|endfor|continue|foreach|endforeach|switch|case|endswitch|do|loopwhile)\b

  specialVariables:
    patterns:
    - comment: Special variables
      name: keyword.other.papyrus
      match: (?i)\b(parent|self)\b

  illegalSpecialVariables:
    patterns:
    - comment: Special variables
      name: meta.invalid.papyrus
      match: (?i)\b(parent|self)\b

  baseTypes:
    patterns:
    - comment: Type
      name: storage.type.papyrus
      match: (?i)\b(bool|float|int|string|var)\b

  illegalBaseTypes:
    patterns:
    - comment: Type
      name: meta.invalid.papyrus
      match: (?i)\b(bool|float|int|string|var)\b

  identifier:
    patterns:
    - comment: Identifier
      name: variable.other.papyrus
      match: (?i)\b([_a-z][0-9_a-z]*)\b

  typeIdentifier:
    patterns:
    - comment: Namespace
      name: storage.type.papyrus
      begin: (?i)\b([_a-z][0-9_a-z]*)(\:)
      beginCaptures:
        '1': {name: storage.type.papyrus}
        '2': {name: keyword.operator.papyrus}
      end: (?i)([_a-z][0-9_a-z]*)(?!\:)\b
      endCaptures:
        '1': {name: storage.type.papyrus}
      patterns:
      - include: '#namespace'
    - comment: Type
      name: storage.type.papyrus
      match: (?i)\b([_a-z][0-9_a-z]*)(?!\:)

  parameterIdentifier:
    patterns:
    - comment: Parameter identifier
      name: variable.parameter.papyrus
      match: (?i)\b([_a-z][0-9_a-z]*)\b

  namespace:
    patterns:
    - include: '#illegalKeywords'
    - include: '#illegalSpecialVariables'
    - include: '#illegalBaseTypes'
    - comment: Namespace
      name: meta.namespace.papyrus
      match: (?i)([_a-z][0-9_a-z]*)(\:)
      captures:
        '1': {name: storage.type.papyrus}
        '2': {name: keyword.operator.papyrus}

  brackets:
    patterns:
    - comment: Brackets
      name: meta.array.papyrus
      match: \[\]
...